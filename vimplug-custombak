" 使用vundle管理插件
“ 也可以使用vim-plug来进行管理
” 都可在Github查找
" 两个管理区别为插件安装的格式
” vundle 为Plugin
" vim-plug 为Plug
“ 以下是vundle的配置"
set nocompatible              " 去除VI一致性,必须
filetype off                  " 必须
"
" 设置包括vundle和初始化相关的runtime path
set rtp+=~/.vim/bundle/Vundle.vim
" 请将安装插件的命令放在vundle#begin和vundle#end之间.
call vundle#begin()
" 另一种选择, 指定一个vundle安装插件的路径
"call vundle#begin('~/some/path/here')
" 让vundle管理插件版本,必须
"
Plugin 'VundleVim/Vundle.vim'



"
" Ultisnips
"
Plugin 'SirVer/ultisnips'
Plugin 'Tenderest/vim-snippets'
"
" Ultisnips setting
"
map <C-n> <nop>
let g:UltiSnipsExpandTrigger="<LEADER>l"
let g:UltiSnipsJumpForwardTrigger="<LEADER>l"
let g:UltiSnipsJumpBackwardTrigger="<LEADER>h"
" 使用 UltiSnipsEdit 命令时垂直分割屏幕
let g:UltiSnipsEditSplit="vertical"
" 如果文件不是在 ~/.vim/mycoolsnippets
" 每次进入Vim自动寻找目录下的Snippets文件配置
let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/bundle/vim-snippets']
" 如果文件在 ~/.vim/mycoolsnippets
" let g:UltiSnipsSnippetDirectories=["UltiSnips", "mycoolsnippets"]


Plugin 'Lokaltog/vim-powerline'
"设置状态栏主题风格
let g:Powerline_colorscheme='solarized256'
"
" 自动补全括号插件
"
Plugin 'Raimondi/delimitMate'
"
" 快速注释插件
"
Plugin 'tpope/vim-commentary'
"
"缩进线条
"
Plugin 'Yggdroot/indentLine'
"
"缩进线条插件配置
"
let g:indentLine_setColors = 1 "设置突出颜色0开启1关闭"
let g:indentLine_color_term = 255 "设置指示线的颜色"
""let g:indentLine_bgcolor_term = 255""let g:indentLine_bgcolor_gui = '#FF5F00'
""let g:indentLine_concealcursor = 'inc'
""let g:indentLine_conceallevel = 2
""let g:indentLine_setConceal = 1 "设置显示竖线"
let g:indentLine_char_list = ['|', '¦', '┆', '┊']

"
"Vim底部状态栏
"
"Plugin 'vim-airline/vim-airline'
"Plugin 'vim-airline/vim-airline-themes'
""
""airline 主题全局设定
""
"let g:airline_theme = 'tomorrow'
""airline_theme"
""simple light fruit_punch behelit dark dark_minimal tomorrow"

"
"markdown语法高亮插件
"
Plugin 'plasticboy/vim-markdown'
Plugin 'iamcco/markdown-preview.vim', { 'do': { -> mkdp#util#install_sync()},'for' :['markdown', 'Vundle' ] } "vim编辑markdown预览插件
let g:mkdp_path_to_chrome = "google-chrome-stable" "设置预览用google chrome打开，同时google chrome安装Markdown Preview Plus
let g:mkdp_auto_start = 0 "设置自动打开，打开为1,取消为0
let g:mkdp_auto_close = 1 "设置自动关闭默认为1,取消写0
let g:mkdp_page_title = '「${name}」' "预览的时候顶部显示markdown文件的名字
let g:mkdp_browserfunc = 'sync_scrool_type:relative'
"noremap M :MarkdownPreview<CR> "无法自动关闭
"Plugin 'connorholyday/vim-snazzy'
Plugin 'ycm-core/YouCompleteMe'
Plugin 'scrooloose/nerdtree'
"更改启动NERDTree的键位
map ff :NERDTreeToggle<CR> 
"A plugin of NERDTree showing git status flags. Works with the LATEST version of NERDTree.
Plugin 'Xuyuanp/nerdtree-git-plugin'
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }
let g:NERDTreeShowIgnoredStatus = 1
" 以下范例用来支持不同格式的插件安装.
" Github上的插件
" 格式为 Plugin '用户名/插件仓库名'
"Plugin 'tpope/vim-fugitive'
" 来自 http://vim-scripts.org/vim/scripts.html 的插件
" Plugin '插件名称' 实际上是 Plugin 'vim-scripts/插件仓库名'
" 只是此处的用户名可以省略
"Plugin 'L9'
" 由Git支持但不再github上的插件仓库 Plugin 'git clone 后面的地址'
"Plugin 'git://git.wincent.com/command-t.git'
" 本地的Git仓库(例如自己的插件) Plugin 'file:///+本地插件仓库绝对路径'
"Plugin 'file:///home/gmarik/path/to/plugin'
" 插件在仓库的子目录中.
" 正确指定路径用以设置runtimepath. 以下范例插件在sparkup/vim目录下
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" 安装L9，如果已经安装过这个插件，可利用以下格式避免命名冲突
"Plugin 'ascenator/L9', {'name': 'newL9'}

" 你的所有插件需要在下面这行之前
call vundle#end()            " 必须
filetype plugin indent on    " 必须
" 加载vim自带和插件相应的语法和文件类型相关脚本
" 忽视插件改变缩进,可以使用以下替代:
"filetype plugin on
"
" 简要帮助文档
" :PluginList       - 列出所有已配置的插件
" :PluginInstall    - 安装插件,追加 `!` 用以更新或使用 :PluginUpdate
" :PluginSearch foo - 搜索 foo ; 追加 `!` 清除本地缓存
" :PluginClean      - 清除未使用插件,需要确认; 追加 `!`
" 自动批准移除未使用插件
"
" 查阅 :h vundle 获取更多细节和wiki以及FAQ
" 将你自己对非插件片段放在这行之后
